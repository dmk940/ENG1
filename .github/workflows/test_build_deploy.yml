# Build a Java project, with Gradle
# see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: CI and deployment

on:
  workflow_dispatch:
  
  push:
    paths-ignore:
      - '.github/workflows/**'
      - 'docs/**'
      - '.gitignore'
      - 'README.md'
      
  pull_request:
    paths-ignore:
      - '.github/workflows/**'
      - 'docs/**'
      - '.gitignore'
      - 'README.md'

jobs:
  test_and_build: 
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout ${{ github.workspace }} # This is the branch that triggered the workflow
      uses: actions/checkout@v2
    
    - name: Set up JDK 1.8 environment
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Test using Gradle
      run: ./gradlew test
    
    - name: Build using Gradle
      run: ./gradlew desktop:dist
   
  deploy:
    needs: test_and_build # this makes it so deploy will be skipped if test_and_build fails
    
    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/master' # Only deploy if branch that triggered workflow is master
    steps:
    - name: Checkout master branch
      uses: actions/checkout@v2
    
    - name: Set up JDK 1.8 environment
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build using Gradle
      run: ./gradlew desktop:dist
      
    - name: Create a new release
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
      
    - name: Upload .jar file to release
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: desktop/build/libs/game.jar
        asset_content_type: application/java-archive
        asset_name: game.jar
        
    - name: Update .jar in repo
      run: |
          git pull
          mv desktop/build/libs/game.jar ./docs
          git add docs/game.jar
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Actions"
          
          git commit -m "Update .jar file" -a
          chmod +x ./_push_merge
          ./_push_merge
      # This is linked to on the website. We want to do this only for master because otherwise in feature-branches
      #the new .jar becomes a commit - causing a complex merge conflict, as git cannot compare these binaries.
